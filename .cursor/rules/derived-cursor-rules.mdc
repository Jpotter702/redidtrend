---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

This document outlines the rules and guidelines for the AI coding assistant within this project. It covers project standards, tech stack, workflow, and best practices. This document is a living document and will evolve as the project progresses.

## TECH STACK

*   **Programming Languages:** JavaScript, [Add other languages as needed]
*   **Frameworks/Libraries:** [List frameworks and libraries. e.g., React, Node.js, Express]
*   **Databases:** [List databases used. e.g., PostgreSQL, MongoDB]
*   **Cloud Platform:** [Specify cloud platform. e.g., AWS, Azure, GCP]
*   **Other Tools:** npm

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

*   All code must be well-commented, explaining the purpose and functionality of each section.
*   README files should be comprehensive and up-to-date, explaining how to run and test each service.
*   API documentation should be maintained using [Specify documentation tool. e.g., Swagger/OpenAPI].
*   Directory structure and file naming conventions should be consistent across all services.

## CODING STANDARDS

*   Use consistent indentation and formatting.
*   Follow established naming conventions for variables, functions, and classes.
*   Implement proper error handling and logging.
*   Write modular and reusable code.
*   Adhere to SOLID principles where applicable.

## WORKFLOW & RELEASE RULES

*   Use Git for version control.
*   Create branches for new features or bug fixes.
*   Submit pull requests for code review.
*   All code must be reviewed and approved before merging into the main branch.
*   Follow a defined release process.

## DEBUGGING

*   Use debugging tools to identify and fix errors.
*   Write unit tests to ensure code functionality.
*   Implement logging to track application behavior.
*   When encountering "EADDRINUSE" errors (address already in use), identify the process occupying the port using `lsof -i :<port>` and terminate it using `kill -9 <PID>`. Replace `<port>` with the port number (e.g., 3001) and `<PID>` with the process ID. Alternatively, use `pkill -f "<process_name>"` to kill the process by name (e.g. `pkill -f "node index.js"`). If the error persists, double-check to ensure no other applications are running on the same port and that the previous process has been fully terminated. If the above methods fail, try changing the port number in the service configuration. As a last resort, change the port number in the service configuration.

## TESTING

*   Services should be tested individually before integration.
*   Use `curl` commands to test basic service functionality.
*   Progress from simple to complex `curl` requests to ensure full functionality.
*   When testing microservices, start by testing the health check endpoint (e.g., `/health`) to ensure the service is responding.
*   The core microservices are:
    *   reddit-trends
    *   script-generator
    *   voice-generator
    *   video-creator
    *   youtube-uploader
*   Testing approach:
    *   Start each service individually
    *   Fix any startup errors
    *   Test with simple `curl` commands
    *   Progress to more complex tests
    *   Move to the next service once fully working
*   Always ensure you are in the correct directory when running commands. For example, to start the `reddit-trends` service, navigate to the `services/reddit-trends` directory before running `node index.js`.
*   **Reddit Trends Service Testing Details:**
    *   **Service Location:** `services/reddit-trends`
    *   **Default Port:** 3001 (can be overridden by the `REDDIT_SERVICE_PORT` environment variable). If port 3001 is in use, try 3002.
    *   **Endpoints:**
        *   `/health`: Returns `{"status":"OK","service":"reddit-trends"}`
        *   `/trends`: Accepts POST requests with a JSON body.
    *   **/trends Request Body Options:**
        ```json
        {
            "subreddits": ["all"],           // Array of subreddit names to search
            "dateRange": {                   // Optional date filtering
                "from": null,                // Start date (optional)
                "to": null                   // End date (optional)
            },
            "searchType": "hot",             // One of: "hot", "top", "new", "rising"
            "customPrompt": ""               // Optional text to filter posts
        }
        ```
    *   **Example `curl` Commands:**
        *   Health Check: `curl http://localhost:<port>/health` (replace `<port>` with the actual port number, e.g., 3001 or 3002)
        *   Get hot posts from multiple subreddits:
            ```bash
            curl -X POST -H "Content-Type: application/json" \
                 -d '{"subreddits":["programming","technology"],"searchType":"hot"}' \
                 http://localhost:<port>/trends
            ```
        *   Get top posts from a specific subreddit with date range:
            ```bash
            curl -X POST -H "Content-Type: application/json" \
                 -d '{"subreddits":["all"],"searchType":"top","dateRange":{"from":"2024-01-01","to":"2024-01-31"}}' \
                 http://localhost:<port>/trends
            ```
*   **Orchestration and Service Handoff:**
    *   **API Gateway** (`api-gateway/index.js`): Acts as the main entry point for all requests and routes requests to appropriate services. All services are accessible through `/api/v1/[service-name]` endpoints.
    *   **Orchestrator** (`orchestrator/index.js`): Coordinates the entire pipeline through the `/pipeline` endpoint and handles the sequential flow of data between services. The pipeline flow is: Reddit Trends → Script Generator → Voice Generator → Video Creator → YouTube Uploader → Analytics.
    *   **Service Handoff Process**: When a request comes to `/api/v1/pipeline`, the orchestrator:
        1.  Gets trending content from Reddit service.
        2.  Passes that data to Script Generator.
        3.  Takes the script and sends it to Voice Generator.
        4.  Combines script and voice-over for Video Creator.
        5.  Optionally sends the video to YouTube Uploader.
        6.  Finally tracks analytics if YouTube upload was performed.
    *   **Example Data Flow:**
        ```javascript
        // 1. Reddit Trends to Script Generator
        const redditResponse = await axios.post(`${REDDIT_SERVICE_URL}/trends`, {
          subreddits,
          dateRange,
          searchType,
          customPrompt
        });
        const trendData = redditResponse.data;

        // 2. Script Generator to Voice Generator
        const scriptResponse = await axios.post(`${SCRIPT_SERVICE_URL}/generate`, {
          trendData,
          style: scriptStyle
        });
        const scriptData = scriptResponse.data;

        // 3. Voice Generator to Video Creator
        const voiceResponse = await axios.post(`${VOICE_SERVICE_URL}/generate`, {
          script: scriptData.script,
          provider: voiceProvider,
          voiceId
        });
        const voiceData = voiceResponse.data;

        // 4. Video Creator to YouTube Uploader
        const videoResponse = await axios.post(`${VIDEO_SERVICE_URL}/create`, {
          script: scriptData,
          audioFile: voiceData.audioFile,
          style: videoStyle
        });
        const videoData = videoResponse.data;

        // 5. Optional YouTube Upload
        if (uploadToYoutube) {
          const youtubeResponse = await axios.post(`${YOUTUBE_SERVICE_URL}/upload`, {
            videoFile: videoData.videoFile,
            title: scriptData.title,
            description: scriptData.description,
            tags: scriptData.tags
          });

          // 6. Analytics Tracking
          await axios.post(`${ANALYTICS_SERVICE_URL}/track`, {
            videoId: youtubeData.videoId,
            source: 'reddit',
            sourceData: trendData
          });
        }
        ```
    *   Each service can also be used independently through the API Gateway:
        *   `/api/v1/reddit/trends` - Get trending Reddit content
        *   `/api/v1/script/generate` - Generate a script
        *   `/api/v1/voice/generate` - Generate voice-over
        *   `/api/v1/video/create` - Create a video
        *   `/api/v1/youtube/upload` - Upload to YouTube
        *   `/api/v1/analytics/videos` - Get video analytics
    *   The services communicate through HTTP requests, and each service maintains its own state and processing logic while the orchestrator manages the flow of data between them.